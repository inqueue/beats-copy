{
  "description": "Pipeline for parsing elasticsearch gc-log logs",
  "processors": [
    {
      "grok": {
        "field": "message",
        "patterns": [
          "%{GCTIMESTAMP}: %{PROCRUNTIME}: Total time for which application threads were stopped: %{BASE10NUM:elasticsearch.gc-log.threads_total_stop_time_secs} seconds, Stopping threads took: %{BASE10NUM:elasticsearch.gc-log.stopping_threads_time_secs} seconds",
          "%{GCTIMESTAMP}: %{PROCRUNTIME}: \\[%{PHASELABEL:phase}\\]",
          "%{GC_OP} %{MARKPHASE} %{TIMES}",
          "%{GCTIMESTAMP}: %{PROCRUNTIME}: \\[%{DATA:elasticsearch.gc-log.cms.phase}: %{BASE10NUM:elasticsearch.gc-log.cms.elapsed_secs}/%{BASE10NUM:elasticsearch.gc-log.cms.clock_secs} secs\\] %{TIMES}",
          "%{GC_OP} \\[YG occupancy: %{BASE10NUM:elasticsearch.gc-log.cms.young_gen_occupancy_before_remark_kb} K \\(%{BASE10NUM:elasticsearch.gc-log.cms.young_gen_total_kb} K\\)\\]%{BASE10NUM:elasticsearch.gc-log.cms.relative_process_time_at_rescan_secs}: \\[Rescan \\(parallel\\) , %{BASE10NUM:elasticsearch.gc-log.cms.parallel_rescan_took_time_secs} secs\\]%{BASE10NUM:elasticsearch.gc-log.cms.relative_process_time_at_weak_refs_processing_secs}: \\[weak refs processing, %{BASE10NUM:elasticsearch.gc-log.cms.weak_refs_processing_took_time_secs} secs\\]%{BASE10NUM:elasticsearch.gc-log.cms.relative_process_time_at_class_unloading_secs}: \\[class unloading, %{BASE10NUM:elasticsearch.gc-log.cms.class_unload_took_time_secs} secs\\]%{BASE10NUM:elasticsearch.gc-log.cms.relative_process_time_at_scrub_symbol_table_secs}: \\[scrub symbol table, %{BASE10NUM:elasticsearch.gc-log.cms.scrub_symbol_table_took_time_secs} secs\\]%{BASE10NUM:elasticsearch.gc-log.cms.relative_process_time_at_scrub_string_table_secs}: \\[scrub string table, %{BASE10NUM:elasticsearch.gc-log.cms.scrub_string_table_took_time} secs\\]%{MARKPHASE} %{TIMES}",
          "%{GC_OP} %{BASE10NUM}: \\[ParNew\\\nDesired survivor size %{BASE10NUM:elasticsearch.gc-log.cms.desired_survivor_size_bytes} bytes, new threshold %{BASE10NUM:elasticsearch.gc-log.cms.new_threshold} \\(max %{BASE10NUM:elasticsearch.gc-log.cms.new_threshold_max}\\)\\\n%{AGE:elasticsearch.gc-log.cms.age}: %{BASE10NUM:elasticsearch.gc-log.cms.young_before_kilobytes}K-\\>%{BASE10NUM:elasticsearch.gc-log.cms.young_after_kilobytes}K\\(%{BASE10NUM:elasticsearch.gc-log.cms.young_space_kilobytes}K\\), %{BASE10NUM:elasticsearch.gc-log.cms.time_spent_secs} secs\\] %{BASE10NUM:elasticsearch.gc-log.cms.heap_before_kilobytes}K-\\>%{BASE10NUM:elasticsearch.gc-log.cms.heap_after_kilobytes}K\\(%{BASE10NUM:elasticsearch.gc-log.cms.heap_size_kilobytes}K\\), %{BASE10NUM:elasticsearch.gc-log.cms.time_spent_heap_secs} secs\\] %{TIMES}"
        ],
        "pattern_definitions": {
          "GCTIMESTAMP": "%{TIMESTAMP_ISO8601:elasticsearch.gc-log.timestamp}",
          "PROCRUNTIME": "%{BASE10NUM:elasticsearch.gc-log.relative_process_timestamp_secs}",
          "GC_OP": "%{GCTIMESTAMP}: %{PROCRUNTIME}: \\[GC \\(%{DATA:elasticsearch.gc-log.cms.phase}\\)",
          "PHASELABEL": "([[:word:]]+-)+[[:word:]]+",
          "TIMES": "\\[Times: user=%{BASE10NUM:elasticsearch.gc-log.times.user_secs} sys=%{BASE10NUM:elasticsearch.gc-log.times.sys_secs}, real=%{BASE10NUM:elasticsearch.gc-log.times.real_secs} secs\\]",
          "AGE": "(- (age\\s+\\d{1,3}):\\s+(\\d+)\\sbytes,\\s+(\\d+)\\stotal\\\n)+",
          "MARKPHASELABEL": "%{INT} %{PHASELABEL}",
          "MARKPHASE": "\\[%{MARKPHASELABEL:elasticsearch.gc-log.cms.mark_phase.name}: %{BASE10NUM:elasticsearch.gc-log.cms.mark_phase.old_gen_occupancy_kb}K\\(%{BASE10NUM:elasticsearch.gc-log.cms.mark_phase.old_gen_size_kb}K\\)\\] %{BASE10NUM:elasticsearch.gc-log.cms.mark_phase.heap_occupancy_kb}K\\(%{BASE10NUM:elasticsearch.gc-log.cms.mark_phase.heap_size_kb}K\\), %{BASE10NUM:elasticsearch.gc-log.cms.mark_phase.pause_time_secs} secs\\]"
        }
      }
    },
    {
      "split": {
        "field": "elasticsearch.gc-log.cms.age",
        "separator": "\n",
        "ignore_missing": true
      }
    }
  ],
  "on_failure": [
    {
      "set": {
        "field": "error.message",
        "value": "{{ _ingest.on_failure_message }}"
      }
    }
  ]
}